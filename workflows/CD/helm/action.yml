name: 'Helm-Deployment Actions'
description: 'Deployment using helm charts'

inputs:
  
  environment:
    required: true
  application_release_name:
    required: true
  release_version:
    required: false
  kube_config:
    required: false
  is_helm_deployment:
    required: true
  helm_version:
    required: false
    default: 3
  helm_chart_path:
    required: false
  helm_values_file:
    required: false
  helm_values_file_path:
    required: false
  image_name:
    required: false
  image_tag:
    required: false
  cluster_namespace:
    required: false
  create_namespace:
    required: false
  helm_argument: 
    required: false
  dry_run:
    required: false
    default: false
  is_atomic:
    required: false
    default: false
  deployment_script_path:
    required: false
  deployment_script_name:
    required: false

runs:
  using: "composite"
  steps:
    - name: Check out repository code
      uses: actions/checkout@v2
    
    - name: Install JAVA 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt' # See 'Supported distributions' for available options
        java-version: '11'  
        
    - name: Install YQ
      uses: carlosperate/download-file-action@v1
      with:
        file-url: 'https://github.com/mikefarah/yq/releases/download/v4.19.1/yq_linux_386.tar.gz'
        file-name: 'yq-linux.tar.gz'
        location: './yq_install'
    - name: configure YQ
      run: |
        pwd
        tar -xzf ./yq_install/yq-linux.tar.gz --directory ./yq_install
        mv $GITHUB_WORKSPACE/yq_install/yq_linux_386 $GITHUB_WORKSPACE/yq_install/yq
        echo "$GITHUB_WORKSPACE/yq_install" >> $GITHUB_PATH
      shell: bash
        
        
    - name: Install HELM V3
      if: ${{ inputs.helm_version == '3' }}
      uses: carlosperate/download-file-action@v1
      with:
        file-url: 'https://get.helm.sh/helm-v3.2.0-linux-amd64.tar.gz'
        location: /tmp/helm
    - name: configure HELM V3
      run: |
         tar -zxvf /tmp/helm/helm-v3.2.0-linux-amd64.tar.gz --directory /tmp/helm \
         && mv /tmp/helm/linux-amd64/helm /usr/local/bin/helm \
         && rm -rf /tmp/helm/
      shell: bash
      if: ${{ inputs.helm_version == '3' }}
      
    - name: Install HELM V2
      if: ${{ inputs.helm_version == '2' }}
      uses: carlosperate/download-file-action@v1
      with:
        file-url: 'https://get.helm.sh/helm-v2.8.2-linux-amd64.tar.gz'
        location: /tmp/helm
    - name: configure HELM V2
      run: |
         tar -zxvf /tmp/helm/helm-v2.8.2-linux-amd64.tar.gz --directory /tmp/helm \
         && mv /tmp/helm/linux-amd64/helm /usr/local/bin/helm \
         && rm -rf /tmp/helm/
      shell: bash
      if: ${{ inputs.helm_version == '2' }}
      
    
    - name: k8s-set-context
      uses: Azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ inputs.kube_config }}     

    
        
    - name: AKS Deploy and create Namespace Dry Run
      run: |
        cd ./${{ inputs.helm_chart_path }}
        ls -lart
        helm upgrade --install ${{inputs.application_release_name}}  . '--values=${{ inputs.helm_values_file }}' ${{inputs.helm_argument}} '--namespace=${{inputs.cluster_namespace}}' --create-namespace --dry-run --debug
        echo ${{env.image}}
      shell: bash
      if: ${{ inputs.dry_run == 'true' }}
           
    - name: AKS Deploy and create Namespace
      run: |
        cd ./${{ inputs.helm_chart_path }}
        helm upgrade --install ${{inputs.application_release_name}}  . '--values=${{ inputs.helm_values_file }}' ${{inputs.helm_argument}} '--namespace=${{inputs.cluster_namespace}}' --create-namespace --atomic
        echo ${{env.image}}
      shell: bash
      if: ${{ inputs.create_namespace == 'true'}}
      
    - name: AKS Deploy basic
      run: |
        cd ./${{ inputs.helm_chart_path }}
        helm upgrade --install ${{inputs.application_release_name}}  . '--values=${{ inputs.helm_values_file }}' ${{inputs.helm_argument}} '--namespace=${{inputs.cluster_namespace}}'
        echo ${{env.image}}
      shell: bash
      if: ${{ inputs.create_namespace != 'true' && inputs.dry_run != 'true' }}  
