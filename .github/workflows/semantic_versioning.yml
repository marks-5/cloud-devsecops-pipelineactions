name: Create Tag and release
on:
  push:
    branches:
      - main

jobs:
  Defining_Semantic_Version:
    name: Defining Semantic Version
    runs-on: ubuntu-latest
    outputs: 
      new_version: ${{ steps.semantic_version.outputs.new_version }}
      old_version: ${{ steps.semantic_version.outputs.old_version }}
      commit_msg: ${{ steps.semantic_version.outputs.commit_msg }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Installing Dependencies
      run: |
        sudo apt update
        sudo apt install node-semver
    - name: Defining Semantic Version
      id: semantic_version
      run: |
        remote=$(git config --get remote.origin.url)
        repo=$(basename $remote .git)
        echo "****************GETTING LAST TAG***********************"
        tag=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/DigitalInnovation/$repo/releases/latest" | jq -r '.tag_name')
        echo "CURRENT TAG: $tag"
        echo "::set-output name=old_version::$tag"
        a=$(echo $tag | cut -c2-)
        b=(${a//"-"/ })
        t=${b[0]}
        echo "****************GETTING LATEST COMMIT LOGS***********************"
        if [ -z "$t" ]
        then
            log=$(git log --pretty=oneline)
            t=0.0.0
        # otherwise, get commits since last tag
        else
            log=$(git log $tag..HEAD --pretty=oneline)
        fi
        echo "COMMIT LOG: $log"
        echo "****************GENERATING NEW SEMANTIC VERSION TAG***********************"
        case "$log" in
            *#major* ) new=$(semver $t -i major)
                       commit_msg="Major Changes";;
            *#patch* ) new=$(semver $t -i patch)
                       commit_msg="Patch Changes";;
            *#minor* ) new=$(semver $t -i minor)
                       commit_msg="Minor Changes";; 
            * ) new=$(semver $t -i patch)
                commit_msg="Patch Changes";; 
        esac
        new_tag=v$new
        echo "NEW TAG: $new_tag"
        echo "::set-output name=new_version::$new_tag"
        echo "::set-output name=commit_msg::$commit_msg"
  Replacing_New_Version_in_files :
    needs: [Defining_Semantic_Version]
    name: Replacing new version in files
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Replacing new version in files
      run: |
        ta1=$(echo ${{needs.Defining_Semantic_Version.outputs.old_version}})
        ta2=${ta1//"-"/ }
        tag1=${ta2[0]}
        echo "old Tag:$tag1"
        new_tag=${{needs.Defining_Semantic_Version.outputs.new_version}}
        echo "New Tag:$new_tag"
        echo "***************Printing $tag1 mentioned places****************"
        grep -rn "@$tag1" *  
        echo "******************Replacing $tag1 with $new_tag in all action.yml files*******************"
        find ./workflows/ -type f -exec sed -i -e "s|@$tag1|@$new_tag|g" {} \;
        #find ./workflows/ -type f -exec sed -i -e "s|@latest|@$new_tag|g" {} \;
        echo "Replacing $tag1 with $new_tag in all action.yml files"
        echo "******************After replacing new version, Printing $new_tag mentioned places**************************"
        grep -rn "@$new_tag" *
        echo "*********************Pushing changes into the main branch***********************"
        git config --global user.name 'Y9886988'
        git config --global user.email 'Y9886988@mnscorp.onmicrosoft.com'
        git add .
        git commit -am "Replacing $tag1 with $new_tag"
        git push
        
  Creating_three_tag :
    needs: [Defining_Semantic_Version, Replacing_New_Version_in_files]
    name: Creating all three tag
    outputs: 
      new_version_with_commit: ${{ steps.tag.outputs.new_version_with_commit }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        #fetch-depth: 0
        ref: main
    - name: Creating all three tag
      id: tag
      run: |             
        remote=$(git config --get remote.origin.url)
        repo=$(basename $remote .git)
        new_tag=${{needs.Defining_Semantic_Version.outputs.new_version}}
        #"****************GETTING LATEST COMMIT SHA***********************"
        commit=$(git rev-parse HEAD)        
        echo "*****************DELETING LATEST TAG FROM THE PREVIOUS RELEASE*****************"
        curl \
        -X DELETE \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https://api.github.com/repos/DigitalInnovation/$repo/git/refs/tags/latest
        
        echo "*****************CREATING LATEST TAG FOR THE NEW COMMITS*****************"
        curl -s -X POST https://api.github.com/repos/DigitalInnovation/$repo/git/refs \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -d @- << EOF
        {
          "ref": "refs/tags/latest",
          "sha": "$commit"
        }
        EOF
        
        echo "*****************CREATING $new_tag TAG FOR THE NEW COMMITS*****************"
        curl -s -X POST https://api.github.com/repos/DigitalInnovation/$repo/git/refs \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -d @- << EOF
        {
          "ref": "refs/tags/$new_tag",
          "sha": "$commit"
        }
        EOF
        
        echo "*****************CREATING $new_tag WITH COMMIT ID TAG FOR THE NEW COMMITS*****************"
        short_commit=$(git log --pretty=format:'%h' -n 1)
        new_tag_commit=$new_tag-$short_commit
        echo "::set-output name=new_version_with_commit::$new_tag_commit"
        curl -s -X POST https://api.github.com/repos/DigitalInnovation/$repo/git/refs \
        -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        -d @- << EOF
        {
          "ref": "refs/tags/$new_tag_commit",
          "sha": "$commit"
        }
        EOF
  Creating_Release :
    needs: [Creating_three_tag, Defining_Semantic_Version, Replacing_New_Version_in_files]
    name: Creating Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Creating Release
      run: |             
        remote=$(git config --get remote.origin.url)
        repo=$(basename $remote .git)
        new_tag_commit=${{needs.Creating_three_tag.outputs.new_version_with_commit}}   
        commit_msg="${{needs.Defining_Semantic_Version.outputs.commit_msg}}"
        ##-------------GitHub Release -------------------
        echo "*****************CREATING RELEASE FOR THE NEW COMMITS*****************"        
        curl \
        -X POST \
        -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"  \
        https://api.github.com/repos/DigitalInnovation/$repo/releases \
        -d '{"tag_name":"'"$new_tag_commit"'","target_commitish":"main","name":"'"$new_tag_commit"'","body":"'"$commit_msg"'","draft":false,"prerelease":false,"generate_release_notes":true}'
